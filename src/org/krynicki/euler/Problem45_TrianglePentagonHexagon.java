package org.krynicki.euler;

import java.util.PriorityQueue;

/**
 * Created by kamil.krynicki on 27/10/2016.
 */
public class Problem45_TrianglePentagonHexagon {
    /*
    Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

    Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
    Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
    Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
    It can be verified that T285 = P165 = H143 = 40755.

    Find the next triangle number that is also pentagonal and hexagonal.
    */

    public static void main(String[] args) {
        PriorityQueue<Generator> queue = new PriorityQueue<>();

        Generator g1 = new TriangleGenerator(2);
        Generator g2 = new PentagonGenerator(2);
        Generator g3 = new HexagonGenerator(2);

        queue.add(g1);
        queue.add(g2);
        queue.add(g3);


        long t1 = System.currentTimeMillis();

        do{
            queue.add(queue.poll().next());
            System.out.println("=============");
            System.out.println("SUM:"+ g1.currentValue());
            System.out.println("SUM:"+ g2.currentValue());
            System.out.println("SUM:"+ g3.currentValue());
        } while(!(g1.currentValue() == g2.currentValue() && g2.currentValue() == g3.currentValue()) );

        long t2 = System.currentTimeMillis();

        System.out.println(t2 - t1);
        System.out.println("SUM:"+ g1.currentNumber());
        System.out.println("SUM:"+ g2.currentNumber());
        System.out.println("SUM:"+ g3.currentNumber());
    }


    static class TriangleGenerator extends Generator {
        TriangleGenerator(int startFrom) {
            super(startFrom);
        }

        @Override
        public long generate(int i) {
            return i*(i+1)>>1;
        }
    }

    static class HexagonGenerator extends Generator {
        HexagonGenerator(int startFrom) {
            super(startFrom);
        }

        @Override
        public long generate(int i) {
            return i*(2*i-1);
        }
    }

    static class PentagonGenerator extends Generator {
        PentagonGenerator(int startFrom) {
            super(startFrom);
        }

        @Override
        public long generate(int i) {
            return i*(3*i-1)>>1;
        }
    }

    static abstract class Generator implements Comparable<Generator> {
        private long currentVal;
        private int currentNum;

        protected Generator() {
            this(1);
        }

        protected Generator(int startFrom) {
            this.currentNum = startFrom;
            this.currentVal = generate(startFrom);
        }

        public long currentValue() {
            return currentVal;
        }

        public int currentNumber() {
            return currentNum;
        }

        public Generator next() {
            currentNum++;
            currentVal = generate(currentNum);
            return this;
        }

        public abstract long generate(int i);

        @Override
        public int compareTo(Generator that) {
            return (int) (this.currentVal - that.currentVal);
        }
    }
}
