package org.krynicki.euler.Problems1to50;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by kamil.krynicki on 07/10/2016.
 */
public class HighlyTriangle {
    /*
     * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

     * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

     * Let us list the factors of the first seven triangle numbers:
     * 1: 1
     * 3: 1,3
     * 6: 1,2,3,6
     *10: 1,2,5,10
     *15: 1,3,5,15
     *21: 1,3,7,21
     *28: 1,2,4,7,14,28
     * We can see that 28 is the first triangle number to have over five divisors.

     * What is the value of the first triangle number to have over five hundred divisors?
     */

    public static void main(String[] args) {
        HighlyTriangle h = new HighlyTriangle();
        long t1 = System.currentTimeMillis();
        System.out.println(h.triangleNumberWithDivisors(500));
        long t2 = System.currentTimeMillis();

        System.out.println(t2 - t1);
    }

    long triangleNumberWithDivisors(int divisors) {
        int increase = 1;
        long currentNumber = 0;

        while(countDivisors(currentNumber) < divisors) {
            currentNumber+=increase++;
        }

        return currentNumber;
    }

    private int countDivisors(long currentNumber) {
        Map<Integer, Integer> factors = new HashMap<>();

        int factor = 2;

        while(currentNumber>1) {
            if(currentNumber%factor == 0) {
                if(factors.containsKey(factor)) {
                    factors.put(factor, factors.get(factor) + 1);
                }
                else {
                    factors.put(factor, 1);
                }
                currentNumber/=factor;
                factor = 2;
            }
            else {
                factor++;
            }
        }

        int divisorsCount = 1;

        for(Map.Entry<Integer, Integer> entry:factors.entrySet()) {
            divisorsCount *= entry.getValue() + 1;
        }

        return divisorsCount;
    }
}
