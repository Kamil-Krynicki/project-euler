package org.krynicki.euler.Problems1to50;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Created by kamil.krynicki on 27/10/2016.
 */
public class Problem44_PentagonNumbers {
    /*
    Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

    It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and
    D = |Pk − Pj| is minimised; what is the value of D?
    */

    public static void main(String[] args) throws IOException {

        long t1 = System.currentTimeMillis();
        generatePentagonal(5000);

        boolean found = false;
        long pentagonalI;
        long pentagonalJ;
        int i = 2;
        while (!found) {
            int j = 1;
            while (j < i && !found) {
                pentagonalI = pentagonal(i);
                pentagonalJ = pentagonal(j);
                if ((found = isPentagonal(pentagonalI - pentagonalJ) && isPentagonal(pentagonalI + pentagonalJ))) {
                    System.out.println("i:" + i + ", j" + (j) + "+ is pentagonal! ");
                    System.out.println(pentagonalI - pentagonalJ);
                }
                j++;
            }
            i++;
        }
        long t2 = System.currentTimeMillis();

        System.out.println(t2 - t1);
    }

    public static void generatePentagonal(int max) {
        long nextNumber = 1;
        int i = 1;
        while (i < max) {
            memo.add(nextNumber);
            i++;
            nextNumber = pentagonal(i);
        }
    }

    public static long pentagonal(int i) {
        return i * (3 * i - 1) >> 1;
    }

    public static Set<Long> memo = new HashSet<>();
    public static int maxNumber;

    public static boolean isPentagonal(long i) {
        return memo.contains(i);
    }

}
